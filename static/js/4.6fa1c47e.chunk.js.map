{"version":3,"sources":["components/utility/Input/Input.module.css","components/utility/utility.js","axios.js","components/utility/Input/Input.js","contact/index.js"],"names":["module","exports","updateObject","oldObject","updatedProperties","instance","axios","create","baseURL","defaults","headers","common","Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","validationError","ValidationError","valueType","Label","label","ContactForm","useState","email","type","placeholder","validation","required","isEmail","valid","name","minLength","message","formData","setFormData","submitted","setSubmitted","submitButtonVisible","setSubmitButtonVisible","checkValidity","rules","isValid","trim","length","maxLength","test","formElementsArray","key","id","config","form","el","event","controlName","updatedControls","target","inputChangedHandler","errorMessage","error","sendEmail","post","then","res","catch","console","log","button","onClick","window","location","replace","onSubmit","preventDefault"],"mappings":"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","file":"static/js/4.6fa1c47e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2Yxc5\",\"Label\":\"Input_Label__1CBkU\",\"InputElement\":\"Input_InputElement__2OOP4\",\"Invalid\":\"Input_Invalid__vjHGb\",\"ValidationError\":\"Input_ValidationError__1jWrE\"};","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties,\r\n    };\r\n};\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://react-hooks-update-fd3d8.firebaseio.com/'\r\n});\r\n\r\ninstance.defaults.headers.common['Authorization'] = 'Access-Control-Allow-Origin'; \r\n\r\nexport default instance;","import React from \"react\";\r\nimport classes from './Input.module.css'\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case \"input\":\r\n            inputElement = (\r\n                <input\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed} \r\n                />\r\n            );\r\n            break;\r\n        case \"textarea\":\r\n            inputElement = (\r\n                <textarea\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n            );\r\n            break;\r\n        case \"select\":\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(\" \")}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                >\r\n                    {props.elementConfig.options.map((option) => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = (\r\n                <input\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n            );\r\n    }\r\n\r\n    let validationError = null;\r\n    if (props.invalid && props.touched) {\r\n        validationError = (\r\n            <p className={classes.ValidationError}>\r\n                Please enter a valid {props.valueType}\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from 'react'\r\n\r\nimport {updateObject} from '../components/utility/utility'\r\nimport './styled.scss'\r\nimport axios from '../axios'\r\nimport Input from '../components/utility/Input/Input'\r\n\r\nconst ContactForm = (props) => {\r\n  const [formData, setFormData] = useState({\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"E-Mail\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n          required: true,\r\n          isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n  },\r\n  name: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Nazwa\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n          required: true,\r\n          minLength: 3,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n  },\r\n  message: {\r\n      elementType: \"textarea\",\r\n      elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Wiadomość\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n          required: true,\r\n          minLength: 6,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n  },\r\n  })\r\n  const [submitted, setSubmitted] = useState(false)\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false)\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(formData, {\r\n        [controlName]: updateObject(formData[controlName], {\r\n            value: event.target.value,\r\n            valid: checkValidity(\r\n                event.target.value,\r\n                formData[controlName].validation\r\n            ),\r\n            touched: true,\r\n        }),\r\n    });\r\n    setFormData(updatedControls);\r\n};\r\n\r\n  const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n        isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n        isValid = value.length >= rules.maxLength && isValid; \r\n    }\r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid;\r\n    }\r\n     isValid ? setSubmitButtonVisible(true) : setSubmitButtonVisible(false)\r\n    return isValid;\r\n};\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault()\r\n    console.log(formData)\r\n    sendEmail()\r\n    setFormData({\r\n      name: '',\r\n      email: '',\r\n      message: '',\r\n    })\r\n    setSubmitted(false)\r\n  }\r\n\r\n  const formElementsArray = [];\r\n    for (let key in formData) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formData[key],\r\n        });\r\n    }\r\n\r\n    let form = formElementsArray.map((el) => (\r\n      <Input\r\n          key={el.id}\r\n          elementType={el.config.elementType}\r\n          elementConfig={el.config.elementConfig}\r\n          value={el.config.value}\r\n          invalid={!el.config.valid}\r\n          shouldValidate={el.config.validation}\r\n          touched={el.config.touched}\r\n          valueType={el.id}\r\n          changed={(event) => inputChangedHandler(event, el.id)}\r\n      />\r\n  ));\r\n\r\n  let errorMessage = null;\r\n\r\n    if (props.error) {\r\n        errorMessage = <p>{props.error.message}</p>;\r\n    }\r\n\r\n  const sendEmail = () => {\r\n    axios.post(\r\n      '/emails.json',\r\n      formData\r\n    ).then(res => setSubmitted(true))\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  let button = null;\r\n  if(submitButtonVisible) {\r\n    button = <button type=\"submit\">Submit</button>\r\n  }\r\n\r\n  const onToggleFormHandler = () => {\r\n    window.location.replace('https://mateuszprzeczek.github.io/portfolio/');\r\n  }\r\n \r\n  if (submitted) {\r\n    button = null;\r\n    form = (\r\n        <>\r\n          <h1>Wiadomość została wysłana.</h1>\r\n          <button className='button' onClick={onToggleFormHandler}>OK</button>\r\n        </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"formContainer\"> \r\n    <div className=\"contactForm\" id={props.id}>\r\n      <div className=\"row\">\r\n        <div className=\"column3\">\r\n          \r\n        </div>\r\n        <div className=\"column\">\r\n        <h1>Kontakt</h1>\r\n    {errorMessage}\r\n    <form onSubmit={submitHandler}>\r\n      {form}\r\n      {button}\r\n    </form>\r\n    </div>\r\n    <div className=\"column2\">\r\n    </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ContactForm"],"sourceRoot":""}